* Startup

#+BEGIN_SRC emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

* Package Management
#+BEGIN_SRC emacs-lisp

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
			 ;;("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(setq required-package-list '(use-package))

(dolist (package required-package-list)
   (unless (package-installed-p package)
     (package-install package)))    

;; use-package
(require 'use-package)
(setq use-package-always-ensure t)

#+END_SRC

* A E S T H E T I C S
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; A E S T H E T I C S
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; turn off the splash
  (setq inhibit-startup-message t)

  ;; get rid of UI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1) 
  (scroll-bar-mode -1)

  ; Disable the menu bar
  (menu-bar-mode -1)

  ;; fringe?
  (set-fringe-mode 10)

  ;; induce seizures
  (setq visible-bell t)

  ;; color-theme ðŸ§›
  (use-package dracula-theme)

  ;; matched delimiters become rainbows
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; add line numbers, but disable for various shells
  ;(global-display-line-numbers-mode t)
  ;(dolist (mode '(org-mode-hook
  ; 		term-mode-hook
  ; 		eshell-mode-hook))
  ;   (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; NEDM!
  (use-package doom-modeline
    :after eshell     ;; Make sure it gets hooked after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon t))

  ;;
  (use-package all-the-icons)

  (use-package minions
    :hook (doom-modeline-mode . minions-mode)
    :custom
    (minions-mode-line-lighter "ï†’"))

#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; UI
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; add column numbers to lower buffer
(column-number-mode)

;; switch between buffers quickly
(global-set-key (kbd "C-c C-<left>")  'windmove-left)
(global-set-key (kbd "C-c C-<right>") 'windmove-right)
(global-set-key (kbd "C-c C-<up>")    'windmove-up)
(global-set-key (kbd "C-c C-<down>")  'windmove-down)

;; use multi-term
(use-package multi-term)

;; follow symlinks to version-controlled files
(setq vc-follow-symlinks t)

;; open Ibuffer in current buffer
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; what are keys even (in the current mode)?
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idel-delay 1))

;; counsel
(use-package counsel)

;; magit
(use-package magit)

;; hide some mode info
(use-package diminish)

;;(use-package smart-mode-line)
(use-package smart-mode-line
  :disabled
  ;:if dw/is-termux
  :config
  (setq sml/no-confirm-load-theme t)
  (sml/setup)
  (sml/apply-theme 'respectful)  ; Respect the theme colors
  (setq sml/mode-width 'right
      sml/name-width 60)

  (setq-default mode-line-format
  `("%e"
      ,(when dw/exwm-enabled
          '(:eval (format "[%d] " exwm-workspace-current-index)))
      mode-line-front-space
      evil-mode-line-tag
      mode-line-mule-info
      mode-line-client
      mode-line-modified
      mode-line-remote
      mode-line-frame-identification
      mode-line-buffer-identification
      sml/pos-id-separator
      (vc-mode vc-mode)
      " "
      ;mode-line-position
      sml/pre-modes-separator
      mode-line-modes
      " "
      mode-line-misc-info))

  (setq rm-excluded-modes
    (mapconcat
      'identity
      ; These names must start with a space!
      '(" GitGutter" " MRev" " company"
      " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
      " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
      "\\|")))

#+END_SRC

* Languages
  
** (La)TeX
#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Tex
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'latex-mode-hook  'flyspell-mode)
(add-hook 'python-mode-hook 'flyspell-prog-mode)

;; Change default TeX compiler to pdflatex
(setq latex-run-command "pdflatex")

#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Set elpy
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package elpy)
(elpy-enable)
(setenv "CONDA_PREFIX" (concat (getenv "HOME") "/miniconda3"))
(setenv "WORKON_HOME"  (concat (getenv "CONDA_PREFIX") "/envs"))

#+END_SRC

** R
#+BEGIN_SRC emacs-lisp
(use-package ess)

#+END_SRC

** Julia
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Julia
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package julia-mode)

#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JavaScript
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; indentation
(setq js-indent-level 2)

;; (use-package js2-mode
;;   :hook (js-mode . js2-minor-mode))


#+END_SRC

** Arduino
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Arduino
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package flycheck)
(use-package arduino-mode)

#+END_SRC

* Org-Mode
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org Mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

;; Org-Mode Bullets
;;(require 'org-bullets)
(use-package org-bullets
  :hook (org-mode . (lambda () (org-bullets-mode 1))))

(setq org-ellipsis " â–¾"
      org-hide-emphasis-markers t)

;; custom org-mode todo-keywords
(setq org-todo-keywords
      '((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)")
	(sequence "CANCELED(c)")
	(sequence "BLOCKED(b)")))

;; custom font-faces for org-mode todo-keywords
(setq org-todo-keyword-faces
      '(("TODO" . org-warning)
	("IN-PROGRESS" . "#1589FF")
	("BLOCKED"  . (:foreground "yellow" : weight bold))
        ("CANCELED" . (:foreground "#778899" :weight bold))))

;; languages that org-babel understands
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (js . t)
   (haskell . t)
   (R . t)))		

#+END_SRC

** Org-Chef
#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org Chef
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package org-chef
  :ensure t)

(setq org-capture-templates
      '(("c" "Cookbook" entry (file "~/org/cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)
        ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
         "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n :author:\n :END:\n** Description\n   %?\n\n** Ingredients\n   %?\n** Directions\n\n")))

#+END_SRC

* Being Evil?
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Use evil mode ?
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;(use-package evil)
  ;;(evil-mode 1)
#+END_SRC
