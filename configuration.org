* Startup

#+BEGIN_SRC emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

* Package Management
#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("org" . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(setq required-package-list '(use-package))

(dolist (package required-package-list)
   (unless (package-installed-p package)
     (package-install package)))    

;; use-package
(require 'use-package)
(setq use-package-always-ensure t)

#+END_SRC

* A E S T H E T I C S
#+BEGIN_SRC emacs-lisp
  ;; turn off the splash
  (setq inhibit-startup-message t)

  ;; get rid of UI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1) 
  (scroll-bar-mode -1)

  ; Disable the menu bar
  (menu-bar-mode -1)

  ;; fringe?
  ;(set-fringe-mode 1)

  ;; induce seizures
  (setq visible-bell t)

  ;; color-theme 🧛
  (use-package dracula-theme)

  ;; matched delimiters become rainbows
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; add line numbers, but disable for various shells
  (global-display-line-numbers-mode t)
  (dolist (mode '(term-mode-hook
                  ;org-mode-hook
   		  eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; NEDM!
  (use-package doom-modeline
    :after eshell     ;; Make sure it gets hooked after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    ;(mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon t))

  ;;
  (use-package all-the-icons)

  (use-package minions
    :hook (doom-modeline-mode . minions-mode)
    :custom
    ;;(minions-mode-line-lighter "")
    (mininons-mode-line-lighter "☄"))


;; You will most likely need to adjust this font size for your system!
(defvar pk/default-font-size 105)
(defvar pk/default-variable-font-size 105)
;;
(set-face-attribute 'default nil :font "Fira Code Retina" :height pk/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height pk/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height pk/default-variable-font-size :weight 'regular)

#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp
  ; add column numbers to lower buffer
  (column-number-mode)

  ; switch between buffers quickly
  (global-set-key (kbd "C-c C-<left>")  'windmove-left)
  (global-set-key (kbd "C-c C-<right>") 'windmove-right)
  (global-set-key (kbd "C-c C-<up>")    'windmove-up)
  (global-set-key (kbd "C-c C-<down>")  'windmove-down)

  ; use ls switches to make dired: list everything, sorted by name, and
  ; human readable
  (setq dired-listing-switches "-alh")
#+END_SRC

Now we set up some things for multi-term:

#+BEGIN_SRC emacs-lisp
; use multi-term
(use-package multi-term)

(add-hook 'term-mode-hook (lambda ()
                            (define-key term-raw-map (kbd "C-y") 'term-paste)))

;; https://oremacs.com/2015/01/01/three-ansi-term-tips/
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)

;(add-hook 'term-mode-hook (lambda ()
;                            (define-key term-raw-map (kbd "C-k") 'term-yank)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
;; follow symlinks to version-controlled files
(setq vc-follow-symlinks t)

;; open Ibuffer in current buffer
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; what are keys even (in the current mode)?
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idel-delay 1))

;; counsel
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-j" . counsel-switch-buffer)
         ("C-M-l" . counsel-imenu)
  :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

;(global-set-key (kbd "C-x C-f") 'counsel-find-file)

;; magit
(use-package magit
  :config 
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t))

;; hide some mode info
(use-package diminish)

;;(use-package smart-mode-line)
(use-package smart-mode-line
  :disabled
  ;:if dw/is-termux
  :config
  (setq sml/no-confirm-load-theme t)
  (sml/setup)
  (sml/apply-theme 'respectful)  ; Respect the theme colors
  (setq sml/mode-width 'right
      sml/name-width 60)

  (setq-default mode-line-format
  `("%e"
      ,(when dw/exwm-enabled
          '(:eval (format "[%d] " exwm-workspace-current-index)))
      mode-line-front-space
      evil-mode-line-tag
      mode-line-mule-info
      mode-line-client
      mode-line-modified
      mode-line-remote
      mode-line-frame-identification
      mode-line-buffer-identification
      sml/pos-id-separator
      (vc-mode vc-mode)
      " "
      ;mode-line-position
      sml/pre-modes-separator
      mode-line-modes
      " "
      mode-line-misc-info))

  (setq rm-excluded-modes
    (mapconcat
      'identity
      ; These names must start with a space!
      '(" GitGutter" " MRev" " company"
      " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
      " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
      "\\|")))

#+END_SRC

* Language Support
** LSP 
   Following directions from [[https://www.sandeepnambiar.com/setting-up-emacs-for-c++/][https://www.sandeepnambiar.com/setting-up-emacs-for-c++/]]
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode :commands lsp :ensure t)
(use-package lsp-ui :commands lsp-ui-mode :ensure t)
(use-package company-lsp
  :ensure t
  :commands company-lsp
  :config (push 'company-lsp company-backends)) ;; add company-lsp as a backend
#+END_SRC
** (La)TeX
#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Tex
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'latex-mode-hook  'flyspell-mode)
(add-hook 'python-mode-hook 'flyspell-prog-mode)

;; Change default TeX compiler to pdflatex
(setq latex-run-command "pdflatex")

#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
     :config
     (elpy-enable)
     (setenv "CONDA_PREFIX" (concat (getenv "HOME") "/miniconda3"))
     (setenv "WORKON_HOME"  (concat (getenv "CONDA_PREFIX") "/envs")))
#+END_SRC

** R
#+BEGIN_SRC emacs-lisp
(use-package ess)
#+END_SRC

** Julia
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Julia
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package julia-mode)

#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; JavaScript
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; indentation
(setq js-indent-level 2)

;; (use-package js2-mode
;;   :hook (js-mode . js2-minor-mode))


#+END_SRC

** C/C++
   Following directions from [[https://www.sandeepnambiar.com/setting-up-emacs-for-c++/][https://www.sandeepnambiar.com/setting-up-emacs-for-c++/]]

   Note: this step requies CCLS to be installed!!
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :ensure t
  :config
  (setq ccls-executable "ccls")
  (setq lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp))))
#+END_SRC
** Arduino
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Arduino
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package flycheck)
(use-package arduino-mode)

#+END_SRC

* Org-Mode
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Org Mode
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (use-package org
    :pin melpa-stable
    :config
    ;;Org agenda files
    (setq org-agenda-files 
      '("~/Dropbox/Org-Files/Orgzly/work-projects.org"
	"~/Dropbox/Org-Files/personal-projects.org"
	"~/Dropbox/Org-Files/reminders.org"
	"~/Dropbox/Org-Files/general-life.org"
	"~/Dropbox/Org-Files/birthdays.org"))

    ;; add drop-down icon to expandable items
    (setq org-ellipsis " ▾"
	  org-hide-emphasis-markers t)

    ;; custom org-mode todo-keywords
    (setq org-todo-keywords
	  '((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)")
	    (sequence "CANCELED(c)")
	    (sequence "BLOCKED(b)")))

    ;; org-agenda bits
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; custom font-faces for org-mode todo-keywords
    (setq org-todo-keyword-faces
	'(("TODO" . org-warning)
	  ("IN-PROGRESS" . "#1589FF")
	  ("BLOCKED"  . (:foreground "yellow" : weight bold))
	  ("CANCELED" . (:foreground "#778899" :weight bold))))

    ;; make latex in org legible on my high DPI screen
    (setq org-format-latex-oprtions 
         (plist-put org-format-latex-options :scale 2.5)))

  ;; Org-Mode Bullets
  (use-package org-superstar
    :pin melpa-stable
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    ;(org-superstar-remove-leading-stars t)
    (org-hide-leading-stars nil)
    (org-superstar-leading-bullet ?\s)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; face size for org headings
  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

  ;; Make sure org-indent face is available
  (require 'org-indent)
  (org-indent-mode)

  ;; Languages that org-babel will understand
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (js . t)
     (python . t)
     (haskell . t)
     (R . t)))

#+END_SRC

The following block will make code block background colors darker.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                      (face-attribute 'default :background) 3))
#+END_SRC

** Org-Chef
BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org Chef
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package org-chef
  :ensure t)

(setq org-capture-templates
      '(("c" "Cookbook" entry (file "~/org/cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)
        ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
         "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n :author:\n :END:\n** Description\n   %?\n\n** Ingredients\n   %?\n** Directions\n\n")))

END_SRC

* Other
Glorious CSV mode
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC

No littering (with tilde files at least):
#+BEGIN_SRC emacs-lisp
(let ((paul-backup-dir "~/.emacs.d/file-backups"))
  (make-directory paul-backup-dir :parents)
  (setq backup-directory-alist '(("." . "~/.emacs.d/file-backups"))))
#+END_SRC
* Being Evil?
#+BEGIN_SRC emacs-lisp
  (use-package evil)
  ;(evil-mode 1)
#+END_SRC
